题目描述
请实现一个函数用来找出字符流中第一个只出现一次的字符。例如，当从字符流中只读出前两个字符"go"时，第一个只出现一次的字符是"g"。当从该字符流中读出前六个字符“google"时，第一个只出现一次的字符是"l"。
输出描述:
如果当前字符流没有存在出现一次的字符，返回#字符。
方法一：
class Solution
{
public:
    vector<char> v;
    map<char,int> m;
  //Insert one char from stringstream
    void Insert(char ch)
    {
        v.push_back(ch);
        m[ch]++;
    }
  //return the first appearence once char in current stringstream
    char FirstAppearingOnce()
    {
        vector<char>::iterator it = v.begin();
        while(it != v.end())
        {
            if(m[*it] == 1)
                return *it;
            ++it;
        }
        return '#';
    }

};
方法二：
class Solution
{
public:
    unsigned a[128];
    queue<char> q;
  //Insert one char from stringstream
    void Insert(char ch)
    {
         ++a[ch - '\0'];
        if(a[ch - '\0'] == 1)
            q.push(ch);
    }
  //return the first appearence once char in current stringstream
    char FirstAppearingOnce()
    {
        while(!q.empty() && a[q.front()] >= 2)
        {
            q.pop();
        }
        if(q.empty())
            return '#';
        return q.front();
    }
    Solution()
    {
        memset(a,0,sizeof(a));
    }
};