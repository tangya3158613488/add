题目描述：

判断一个整数是否是回文数。回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。

示例 1:

输入: 121
输出: true
示例 2:

输入: -121
输出: false
解释: 从左向右读, 为 -121 。 从右向左读, 为 121- 。因此它不是一个回文数。
示例 3:

输入: 10
输出: false
解释: 从右向左读, 为 01 。因此它不是一个回文数。

class Solution {
public:
    bool isPalindrome(int x) {
        if(x < 0)
            return false;
        int x1 = x;
        int a;
        double b = 0;
        while(x1 != 0)
        {
            a = x1 % 10;
            x1 = x1 / 10;
            b = b*10 + a;
        }
        if(b == x)
            return true;
        else
            return false;

    }
};

题目描述：

给定一个赎金信 (ransom) 字符串和一个杂志(magazine)字符串，判断第一个字符串ransom能不能由第二个字符串magazines里面的字符构成。如果可以构成，返回 true ；否则返回 false。

(题目说明：为了不暴露赎金信字迹，要从杂志上搜索各个需要的字母，组成单词来表达意思。)

注意：

你可以假设两个字符串均只含有小写字母。

canConstruct("a", "b") -> false
canConstruct("aa", "ab") -> false
canConstruct("aa", "aab") -> true

class Solution {
public:
    bool canConstruct(string ransomNote, string magazine) {
       map<char,int> m;
       for(auto& e1 : magazine)
       {
           m[e1]++;
       }
        for(auto& e2 : ransomNote)
        {
            if(--m[e2] < 0)
                return false;
        }
        return true;
    }
};
