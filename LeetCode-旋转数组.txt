题目描述：给定一个数组，将数组中的元素向右移动 k 个位置，其中 k 是非负数。

示例 1:

输入: [1,2,3,4,5,6,7] 和 k = 3
输出: [5,6,7,1,2,3,4]
解释:
向右旋转 1 步: [7,1,2,3,4,5,6]
向右旋转 2 步: [6,7,1,2,3,4,5]
向右旋转 3 步: [5,6,7,1,2,3,4]
示例 2:

输入: [-1,-100,3,99] 和 k = 2
输出: [3,99,-1,-100]
解释: 
向右旋转 1 步: [99,-1,-100,3]
向右旋转 2 步: [3,99,-1,-100]

思路一：

class Solution {
public:
    void rotate(vector<int>& nums, int k){
       k = k % nums.size();//对于大于数组长度的情况需要加这条语句
       while(k--)
       {
           swap(nums[0],nums[nums.size()-1]);
           for(int i = 1; i < nums.size(); i++)
           {
               swap(nums[i],nums[nums.size()-1]);
           }
       }
    }
};

但这种思路对于数组长度很大的情况会超出时间限制。

最简洁的思路：三次使用reverse（）逆置函数，以k为分界线，分别为前半部分的逆置、后半部分的逆置，最后从头到尾整体逆置。

class Solution {
public:
    void rotate(vector<int>& nums, int k){
       k = k % nums.size();//对于大于数组长度的情况需要加这条语句
       while(k--)
       {
           swap(nums[0],nums[nums.size()-1]);
           for(int i = 1; i < nums.size(); i++)
           {
               swap(nums[i],nums[nums.size()-1]);
           }
       }
    }
};
