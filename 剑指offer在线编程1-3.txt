1.在一个二维数组中（每个一维数组的长度相同），每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。
class Solution {
public:
    bool Find(int target, vector<vector<int> > array) {
        int row = array.size();
        int col = array[0].size();
        int i,j;
        //从而为数组的左下角开始遍历，如果target比左下角的数字小就往上走i--，
        //如果target比左下角的数字大就往右走j++,直到找到与target相等的数并返回true，否则返回false
        for(i = row-1,j = 0;i >= 0 && j < col;)
        {
            if(target == array[i][j])
                return true;
            else if(target < array[i][j])
            {
                i--;
                continue;
            }
            else
            {
                j++;
                continue;
            }
        }
        return false;
    }
};
2.请实现一个函数，将一个字符串中的每个空格替换成“%20”。例如，当字符串为We Are Happy.则经过替换之后的字符串为We%20Are%20Happy。
class Solution {
public:
    void replaceSpace(char *str,int length) {
        if(str == NULL || length <= 0)
            return;
        int length0 = 0;
        int blanknum = 0;
        int i = 0;
        //统计原数组的长度和空格的个数
        while(str[i] != '\0')
        {
            ++length0;
            if(str[i] == ' ')
                ++blanknum;
            ++i;
        }
        //记录替换后数组的长度
        int newlength = length0+blanknum*2;
        if(newlength > length)
            return;
        //定义两个指针，p1指向原字符串的末尾，p2指向替换后的字符串的末尾
        int p1 = length0;
        int p2 = newlength;
        while(p1 >= 0 && p2 > p1)
        {
            if(str[p1] == ' ')
            {
                str[p2--] = '0';
                str[p2--] = '2';
                str[p2--] = '%';
            }
            else
            {
                str[p2] = str[p1];
                --p2;
            }
            --p1;
        }
    }
};
3.输入一个链表，按链表从尾到头的顺序返回一个ArrayList。
class Solution {
public:
    vector<int> printListFromTailToHead(ListNode* head) {
        vector<int> v;
        stack<ListNode*> s;
        ListNode* node = head;
        while(node != NULL)
        {
            s.push(node);
            node = node->next;
        }
        while(!s.empty())
        {
            v.push_back(s.top()->val);
            s.pop();
        }
        return v;
    }
};