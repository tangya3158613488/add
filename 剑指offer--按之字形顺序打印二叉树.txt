题目描述
请实现一个函数按照之字形打印二叉树，即第一行按照从左到右的顺序打印，第二层按照从右至左的顺序打印，第三行按照从左到右的顺序打印，其他行以此类推。

思路：用两个栈，一个栈存奇数行数据，一个栈存偶数行数据
/*
struct TreeNode {
    int val;
    struct TreeNode *left;
    struct TreeNode *right;
    TreeNode(int x) :
            val(x), left(NULL), right(NULL) {
    }
};
*/
class Solution {
public:
    vector<vector<int> > Print(TreeNode* pRoot) {
        vector<vector<int>> ret;
        if(pRoot == nullptr)
            return ret;
        stack<TreeNode*> s1;//奇数行放在s1
        stack<TreeNode*> s2;//偶数行放在s2
        s1.push(pRoot);
        while(!s1.empty() || !s2.empty())
        {
            vector<int> ret1,ret2;
            TreeNode* cur = nullptr;
            while(!s1.empty())
            {
                cur = s1.top();
                if( cur->left)
                    s2.push(cur->left);
                if(cur->right)
                     s2.push(cur->right);
                ret1.push_back(s1.top()->val);  //保存奇数行数据
                s1.pop();
            }
            if(!ret1.empty())
                ret.push_back(ret1);
            while(!s2.empty())
            {
                cur = s2.top();
                if(cur->right)
                    s1.push(cur->right);
                if(cur->left)
                    s1.push(cur->left);
                ret2.push_back(s2.top()->val);//保存偶数行数据
                s2.pop();
            }
            if(!ret2.empty())
                ret.push_back(ret2);
        }
        return ret;
    }
};