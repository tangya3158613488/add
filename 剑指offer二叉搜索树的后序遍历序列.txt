题目描述
输入一个整数数组，判断该数组是不是某二叉搜索树的后序遍历的结果。如果是则输出Yes,否则输出No。假设输入的数组的任意两个数字都互不相同。
class Solution {
public:
    bool VerifySquenceOfBST(vector<int> sequence) {
        vector<int> leftsequence;
        vector<int> rightsequence;
        if(sequence.size() == 0)
            return false;
        //根据二叉搜索树的性质和后序遍历的特点，数组最后一个元素为根节点的值，
        //比根节点值小的为根的左子树,比根节点值大的为根的右子树
        int root = sequence[sequence.size()-1];
        int i = 0;
        for(;i < sequence.size()-1; i++)
        {
            if(sequence[i] > root)
                break;
        }
        int j = i;
        for(;j < sequence.size()-1;j++)
        {
            if(sequence[j] < root)
                return false;
        }
        //将小于根节点的值插入leftsequence
        if(i != 0)
        {
            for(int m = 0; m < i;m++)
                leftsequence.push_back(sequence[m]);
        }
        //将大于根节点的值插入rightsequence
        if(i != sequence.size() - 2)
        {
            for(int n = i; n < sequence.size()-1;n++)
                rightsequence.push_back(sequence[n]);
        }
        //判断左子树是否是二叉搜索树
        bool left = true;
        if(leftsequence.size() > 1)
            left = VerifySquenceOfBST(leftsequence);
        bool right = true;
        if(rightsequence.size() > 1)
            right = VerifySquenceOfBST(rightsequence);
        return (left && right);
    }
};