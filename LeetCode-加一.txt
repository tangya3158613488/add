题目描述：

给定一个由整数组成的非空数组所表示的非负整数，在该数的基础上加一。

最高位数字存放在数组的首位， 数组中每个元素只存储单个数字。

你可以假设除了整数 0 之外，这个整数不会以零开头。

示例 1:

输入: [1,2,3]
输出: [1,2,4]
解释: 输入数组表示数字 123。
示例 2:

输入: [4,3,2,1]
输出: [4,3,2,2]
解释: 输入数组表示数字 4321。

思路：

从数组末尾遍历：

将digits赋值给新创建的数组ret
从ret数组的末尾往前遍历，如果最后一个数字不等于9，即小于9，此时直接将末尾数字加一即可，然后跳出循环。
如果最后一个数字等于9，将最后一个数字赋值为0，再看此时的数组下标是否为0，如果为0，此数组只有一位数，需要在数组的第一位插入一个数字1；如果此时数组下标不是0，continue结束本次循环，i++，然后重复上述步骤，满足条件后跳出循环。
最后返回数组ret.
class Solution {
public:
    vector<int> plusOne(vector<int>& digits) {
        vector<int> ret = digits;
        for(int i = ret.size() - 1; i >= 0; i--)
        {
            if(ret[i] != 9)
             {
                ret[i]++;
                break;
            }
            else
            {
                ret[i] = 0;
                if(i ==  0)
                {
                    ret.insert(ret.begin(),1);
                }
                continue;
            }
        }
        return ret;
    }
};
