题目描述
给出一个链表，每 k 个节点一组进行翻转，并返回翻转后的链表。k 是一个正整数，它的值小于或等于链表的长度。如果节点总数不是 k 的整数倍，那么将最后剩余节点保持原有顺序。

说明：
1. 你需要自行定义链表结构，将输入的数据保存到你的链表中；
2. 你不能只是单纯的改变节点内部的值，而是需要实际的进行节点交换；
3. 你的算法只能使用常数的额外空间。
输入描述:
第一行输入是链表的值
第二行输入是K的值，K是大于或等于1的整数

输入形式为：
1 2 3 4 5
2
输出描述:
当 k = 2 时，应当输出:
2 1 4 3 5

当 k = 3 时，应当输出:
3 2 1 4 5

当k=6时，应当输出：
1 2 3 4 5
示例1
输入
复制
1 2 3 4 5
2
输出
复制
2 1 4 3 5

#include<iostream>
#include<vector>
using namespace std;
struct ListNode
{
    int val;
    struct ListNode* next;
    ListNode(int val)
        :val(val)
        ,next(nullptr)
     {}
};
ListNode* CreateList(vector<int> v)
{
    ListNode* pHead = new ListNode(v[0]);
    ListNode* pListHead = pHead;
    for(int i = 1;i < v.size()-1;i++)
    {
        pHead->next = new ListNode(v[i]);
        pHead = pHead->next;
    }
    return pListHead;
}
ListNode* ReverseList(ListNode* pListHead,unsigned int k)
{
    ListNode* right = pListHead;
    ListNode* left = pListHead;
    for(int i = 0; i < k;i++)
    {
        if(right)
        {
            right = right->next;
        }
        else
        {
            return left;
        }
    }
    ListNode* prev = pListHead;
    ListNode* head = left;
    while(left != right)
    {
        ListNode* next = left->next;
        left->next = prev;
        prev = left;
        left = next;
    }
    head->next = ReverseList(right,k);
    return prev;
}
int main()
{
    vector<int> v;
    int n = 0;
    while(cin >> n)
    {
        v.push_back(n);
    }
    int k = v[v.size()-1];
    ListNode* pListHead = CreateList(v);
    pListHead = ReverseList(pListHead,k);
    while(pListHead)
    {
        cout << pListHead->val << " ";
        pListHead = pListHead->next;
    }
    return 0;
}