1.最长回文子串
给定一个字符串 s，找到 s 中最长的回文子串。你可以假设 s 的最大长度为 1000。

示例 1：

输入: "babad"
输出: "bab"
注意: "aba" 也是一个有效答案。
示例 2：

输入: "cbbd"
输出: "bb"
（1）暴力法：时间超时
class Solution {
public:
    string longestPalindrome(string s) {
         string result("");
        int sSize = int(s.size());
        for (int i = 0; i < sSize; i++)
        {
            int maxLength = sSize - i;
            for (int tmpSize = 1; tmpSize <= maxLength; tmpSize++)
            {
                string tmpStr = s.substr(i, tmpSize);
                if (isPalindrome(tmpStr) && tmpStr.size() > result.size())
                {
                    result = tmpStr;
                }
            }
        }
        return result;
    }
    bool isPalindrome(string s)
    {
        int left = 0;
        int right = int(s.size()) - 1;
        for (; left < right; left++, right--)
        {
            if (s[left] != s[right])
            {
                return false;
            }
        }
        return true;
    }
};
（2）动态规划
class Solution {
public:
    string longestPalindrome(string s) {
        int n = s.size();
        vector<vector<int>> dp(n, vector<int>(n));
        string ans;
        for (int l = 0; l < n; ++l)
        {
            for (int i = 0; i < n - l; ++i) 
            {
                int j = i + l;
                if (l == 0) 
                {
                    dp[i][j] = 1;
                }
                else if (l == 1) 
                {
                    dp[i][j] = (s[i] == s[j]);
                }
                else 
                {
                    dp[i][j] = (s[i] == s[j] && dp[i + 1][j - 1]);
                }
                if (dp[i][j] && l + 1 > ans.size()) 
                {
                    ans = s.substr(i, l + 1);
                }
            }
        }
        return ans;
    }
};