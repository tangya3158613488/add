题目描述
给一个链表，若其中包含环，请找出该链表的环的入口结点，否则，输出null。

思路：
如果单链表有环，走得快的指针fast若与走得慢的指针slow相遇，slow指针肯定没有遍历完链表，而fast指针已经在环内循环了n圈(n>=1)。假设slow指针走了s步
则fast指针走了2s步（fast步数还等于s加上在环上多赚点n圈），设环长度为r，则满足关系表达式：
2s = a+nr
s = nr
设整个链表的长度为L，入口环与相遇点的距离为x，起点到环入口点的距离为a，则满足如下关系表达式：
a+x = nr
a+x = (n-1)r+r = (n-1)r+L-a
a = (n-1)r+(L-a-x)
(L-a-x)为相遇点到环入口点的距离，从链表头到环入口点的距离 = (n-1)*循环内环+相遇点到环入口点，于是从链表头与相遇点分别设一个指针，每次各走一步两个指针必定相遇，且相遇第一点为环入口点。
/*
struct ListNode {
    int val;
    struct ListNode *next;
    ListNode(int x) :
        val(x), next(NULL) {
    }
};
*/
class Solution {
public:
    ListNode* EntryNodeOfLoop(ListNode* pHead)
    {
        ListNode* slow = pHead,*fast = pHead;
        while(fast && fast->next)
        {
            slow = slow->next;
            fast = fast->next->next;
            if(fast == slow)
                break;
        }
        if(fast == nullptr || fast->next == nullptr)
            return nullptr;
        slow = pHead;
        while(slow != fast)
        {
            slow = slow->next;
            fast = fast->next;
        }
        return slow;
    }
};