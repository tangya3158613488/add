操作给定的二叉树，将其变换为源二叉树的镜像。
输入描述:
二叉树的镜像定义：源二叉树 
    	    8
    	   /  \
    	  6   10
    	 / \  / \
    	5  7 9 11
    	镜像二叉树
    	    8
    	   /  \
    	  10   6
    	 / \  / \
    	11 9 7  5
先前序遍历这棵树的每个结点，如果遍历到的结点有子结点，就交换它的两个子节点，
当交换完所有的非叶子结点的左右子结点之后，就得到了树的镜像
/*
struct TreeNode {
	int val;
	struct TreeNode *left;
	struct TreeNode *right;
	TreeNode(int x) :
			val(x), left(NULL), right(NULL) {
	}
};*/
class Solution {
public:
	//递归
    void Mirror(TreeNode *pRoot) {
        if(pRoot == nullptr)
            return;
        if(pRoot->left == nullptr && pRoot->right == nullptr)
            return;
        TreeNode* temp = pRoot->left;
        pRoot->left = pRoot->right;
        pRoot->right = temp;
        if(pRoot->left)
            Mirror(pRoot->left);
        if(pRoot->right)
            Mirror(pRoot->right);
    }

	void Mirror(TreeNode *pRoot) {
        if (pRoot == NULL)return;
        stack<TreeNode*> st;
        TreeNode* p = NULL;
        st.push(pRoot);
        while (st.size())
        {
            p = st.top();
            st.pop();
            swap(p->left, p->right);
            if (p->left)st.push(p->left);
            if (p->right)st.push(p->right);
        }
     }  //队列的非递归
    void Mirror(TreeNode *pRoot) {
        if (pRoot == NULL)return;
        queue<TreeNode*> qu;
        TreeNode* p = NULL;
        qu.push(pRoot);
        while (qu.size())
        {
            p = qu.front();
            qu.pop();
            swap(p->left, p->right);
            if (p->left)qu.push(p->left);
            if (p->right)qu.push(p->right);
        }
    }
};		
		
