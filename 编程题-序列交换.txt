

小易给你一个包含n个数字的数组a_1,a_2,…,a_3a 你可以对这个数组执行任意次以下交换操作：
对于数组中的两个下标i,j(1<=i,j<=n)，如果ai+aj 为奇数，就可以交换ai和aj。现在允许你使用操作次数不限，小易希望你能求出在所有能通过若干次操作可以得到的数组中，字典序最小的一个是什么。

输入描述:
第一行一个整数n；
第二行n个整数a1,a2,..,an 表示数组，每两个数字之间用一个空格分隔。
输入保证1 <= n <= 10^5;1<=ai<=10^9
输出描述:
n个整数，每两个整数之间用一个空格分隔，表示得到的字典序最小的数组。
示例1
输入
4
7 3 5 1
输出
7 3 5 1
示例2
输入
10
53941 38641 31525 75864 29026 12199 83522 58200 64784 80987
输出
12199 29026 31525 38641 53941 58200 64784 75864 80987 83522
#include<iostream>
#include<vector>
#include<algorithm>
using namespace std;
 
int main()
{
    int data;
    int n;
    cin >> n;
    vector<int> v;
    for(int i = 0; i < n; i++)
    {
        cin >> data;
        v.push_back(data);
    }
    int oddSum = 0;
    for (int i = 0; i < n; i++) 
    {
        if (v[i] % 2 == 1) 
        {
             oddSum++;
        }
    }
        //如果全是偶数或者全是奇数则无法排序，直接输出
    if (oddSum == 0 || oddSum == n) 
    {
        for(int i = 0; i < n; i++)
            cout << v[i] << " ";
        return 0;
    }
    sort(v.begin(),v.end());
    for(int i = 0; i < n; i++)
        cout << v[i] << " ";
    cout << endl;
    return 0;
}