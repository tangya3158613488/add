题目描述
输入一个递增排序的数组和一个数字S，在数组中查找两个数，使得他们的和正好是S，如果有多对数字的和等于S，输出两个数的乘积最小的。
输出描述:
对应每个测试案例，输出两个数，小的先输出。
class Solution {
public:
    vector<int> FindNumbersWithSum(vector<int> array,int sum) {
        vector<int> ret;
        int start = 0;
        int end = array.size() - 1;
        while (start < end)
        {
            if (array[start] + array[end] == sum)
            {
                ret.push_back(array[start]);
                ret.push_back(array[end]);
                break;
            }
            else if (array[start] + array[end] < sum)
                start++;
            else
                end--;
        }
        return ret;
    }
};
题目描述
小明很喜欢数学,有一天他在做数学作业时,要求计算出9~16的和,他马上就写出了正确答案是100。但是他并不满足于此,他在想究竟有多少种连续的正数序列的和为100(至少包括两个数)。没多久,他就得到另一组连续正数和为100的序列:18,19,20,21,22。现在把问题交给你,你能不能也很快的找出所有和为S的连续正数序列? Good Luck!
输出描述:
输出所有和为S的连续正数序列。序列内按照从小至大的顺序，序列间按照开始数字从小到大的顺序
class Solution {
public:
    vector<vector<int> > FindContinuousSequence(int sum) {
        vector<vector<int>> ret;
        if(sum < 3)
            return ret;
        int small = 1;
        int big = 2;
        int mid = (1+sum)/2;
        int cursum = small + big;
        while(small < mid)
        {
            if(cursum == sum)
                InsertSequence(ret,small,big);
            while(cursum > sum && small < mid)
            {
                cursum -= small;
                ++small;
                if(cursum == sum)
                    InsertSequence(ret,small,big);
            }
            ++big;
            cursum += big;
        }
        return ret;
    }
    void InsertSequence(vector<vector<int>>& ret,int small,int big)
    {
        vector<int> v;
        for(int i = small; i <= big; i++)
        {
            v.push_back(i);
        }
        ret.push_back(v);
    }
};