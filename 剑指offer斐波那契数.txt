题目：写一个函数，输入n，求斐波那契数列的第n项。
最简单直观的解法是用递归法：
long long Fibonacci(int n)
{
	if(n <= 0)
		return 0;
	if(n == 1)
		return 1;
	return Fibonacci(n-1) + Fibonacci(n-2);
}
但是这种方法有很严重的效率问题，例如：想要求f(10)，需要先求f(9)和f(8)。
同样，想求f(9),需要先求得f(8)和f(7)....这样就会有很多重复计算的值，随着n的增大而急剧增加，计算量也会急剧增加。
改进方法：将已经得到的数列中间项保存起来，下次需要计算的时候先查找一下，如果前面已经计算过就不用再重复计算了
long long Fibonacci(int n)
{
	int result[2] = {0,1};
	if(n < 2)
	{
		return result[n];
	}
	long f1 = 0;
	long f2 = 1;
	long fn = 0;
	for(int i = 2; i <= n;i++)
	{
		fn = f1 + f2;
		f1 = f2;
		f2 = fn;
	}
	return fn;
}